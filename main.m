function main
    %% Prepare signals
    [s44, fs] = audioread('stereo_44k.wav');
    s16 = resample(s44, 16000, fs, 500);
        % Use an anti-aliasing filter with an order as high as 500
        % -- otherwise this resampling would introduce significant aliasing
    m16 = mean(s16, 2);
    s11 = resample(s44, 11025, fs, 500);
    m11 = mean(s11, 2);
    s8 = resample(s44, 8000, fs, 500);
    m8 = mean(s8, 2);
    s8c = m8;
    s8d = (s8(:, 1) - s8(:, 2)) / 2;

    %% Video 1:
    % Mono 11k
    % Mono 11k played at 16k
    % Mono 11k played at 8k
    make_video('video1.avi', struct( ...
        'signal', {m11, m11, m11}, ...
        'fs', {11025, 16000, 8000}, ...
        'title', { ...
            '(1a) Mono 11025 Hz', ...
            '(1b) Mono 11025 Hz played at Mono 16000 Hz', ...
            '(1c) Mono 11025 Hz played at Mono 8000 Hz', ...
        } ...
    ));

    %% Video 2:
    % Mono 16k
    % Mono 16k opened as stereo 8k
    make_video('video2.avi', struct( ...
        'signal', {m16, m2s(m16), m8}, ...
        'fs', {16000, 8000, 8000}, ...
        'title', { ...
            '(2a) Mono 16000 Hz', ...
            '(2b) Mono 16000 Hz opened as stereo 8000 Hz', ...
            '(2c) Mono 16000 Hz properly downsampled to 8000 Hz', ...
        } ...
    ));

    %% Video 3:
    % Stereo 8k
    % Stereo 8k's center channel
    % Stereo 8k's side channel
    make_video('video3.avi', struct( ...
        'signal', {s8, s8c, s8d}, ...
        'fs', {8000, 8000, 8000}, ...
        'title', { ...
            '(3a) Stereo 8000 Hz', ...
            '(3b) Stereo 8000 Hz, center channel', ...
            '(3c) Stereo 8000 Hz, side channel', ...
        } ...
    ));

    %% Video 4:
    % Stereo 8k's center channel
    % Stereo 8k's center channel upsampled to 16k
    % Stereo 8k's center channel upsampled to 16k and convolved with [1, 1]
    make_video('video4.avi', struct( ...
        'signal', {s8c, kron(s8c, [1; 0]), kron(s8c, [1; 1])}, ...
        'fs', {8000, 16000, 16000}, ...
        'title', { ...
            '(4a) Stereo 8000 Hz, center channel', ...
            '(4b) Stereo 8000 Hz, center channel, upsampled to 16000 Hz', ...
            '(4c) Stereo 8000 Hz, center channel, upsampled to 16000 Hz, convolved with [1, 1]', ...
        } ...
    ));

    %% Video 5:
    % Stereo 8k's side channel
    % Stereo 8k's side channel upsampled to 16k
    % Stereo 8k's side channel upsampled to 16k and convolved with [1, -1]
    make_video('video5.avi', struct( ...
        'signal', {s8d, kron(s8d, [1; 0]), kron(s8d, [1; -1])}, ...
        'fs', {8000, 16000, 16000}, ...
        'title', { ...
            '(5a) Stereo 8000 Hz, side channel', ...
            '(5b) Stereo 8000 Hz, side channel, upsampled to 16000 Hz', ...
            '(5c) Stereo 8000 Hz, side channel, upsampled to 16000 Hz, convolved with [1, -1]', ...
        } ...
    ));

    %% Video 6:
    % Stereo 8k's center channel upsampled to 16k and convolved with [1, 1]
    % Stereo 8k's side channel upsampled to 16k and convolved with [1, -1]
    % Sum of the two above, = stereo 8k opened as mono 16k
    make_video('video6.avi', struct( ...
        'signal', {kron(s8c, [1; 1]), kron(s8d, [1; -1]), s2m(s8)}, ...
        'fs', {16000, 16000, 16000}, ...
        'title', { ...
            '(6a) Stereo 8000 Hz, center channel, upsampled to 16000 Hz, convolved with [1, 1]', ...
            '(6b) Stereo 8000 Hz, side channel, upsampled to 16000 Hz, convolved with [1, -1]', ...
            '(6c) 6a + 6b = stereo 8000 Hz opened as mono 16000 Hz', ...
        } ...
    ));
end

function stereo = m2s(mono)
    stereo = reshape(mono, [2, length(mono) / 2])';
end

function mono = s2m(stereo)
    mono = reshape(stereo', [numel(stereo), 1]);
end
